


					Протокол http


-правило регламентирующее взаимодействие сервера и клиента.

Для того, что бы открыть страницу пользователь переходил по ссылке или указывает адрес URL (одинаково)
После этого браузер отправляет запрос на сервер (request) и получает страницу-ответ (response)
Запрос и ответ - строки, оформленные протоколом. Всегда сначала запрос, потом ответ

*Протокол не содержит возможности запоминания сервером клиента
**Сервер не может отследить кому конретно отослал этот запрос

					Структура сообщений

1. Стартовая строка (starting line) - первая строка сообщения (определяет тип сообщения)

2. заголовки (headers) - затем на новых строках заголовки (характеризуют тело сообщения, параметры и тд)

3. Тело сообщения (message body)-далее пустая строка и тело сообщения (данные сообщения)
	тело не является обязательным



1. Стартовая строка:

методЗапроса URIзапрошеннойСтраницы версииПротоколаHTTP

-методЗапроса: GET -что то получить
		POST - отправить

-URI- адрес страницы (отличие от URL что не содержит имени домена, он указывается отдельно)

-версия - указывается буквами HTTP, потом /, потом версия


Пример

	GET /page/test HTTP/1.1



GET - метод для получения страницы (но можно удалять, получать или редактировать)
POST - для отправки данных пользователя (оставить комментарий, так его текст будет передан в теле)
       а также для загрузки файлов на сервер
DELETE - метод для удаления данных пользователем в сервере на странице
PATCH - метод для изменения данных


1. Стартовая строка ОТВЕТА

состоит из: версииПротоколаHTTP кодаСостояния поясненияСостояния

КодСостояния (status code) - был ли успешен запрос или ошибка и состоит из 3 цифр

ПоясненияСостояния (reason phrase) - короткий текст, описывающий код состояния (для человека типа Error)

Пример:

	HTTP/1.1 404 Not Found


Существуют группы кодов состояний
1xx-нформационное сообщение о процессе передачи
2хх-об успехе
3хх-для успеха выполнить другой запрос по другому URI (редирект)
4хх-ошибка по вине клиента
5хх-ошибка по вине сервера






2. НТТР заголовки (доп параметры)

Пример:

	Content-Type: text/html; charset=utf-8
	Content-Language: ru
	Last-Modified: Sat,
	  16 Jan 2020
	  21:16:42 GMT

Все заголовик делятся на 4 группы:
-общие (general headers) могут относится к ответу или запросу и не имеют отношения к данным

-запроса(Request Headers) инф о ресурсе или клиенте

-ответа(Response Headers) метаданные ответа, местонахождение о сервере и т.д.

-сущности(Entity Headers) инф о теле ресурса (длинаб тип содержимого Contnet-Type Content-Length)

Host: имя домена
	Host:example.com

Date:момент времени создания сообщения
	Date:Sat,16 Jan 2020 21:16:42 GMT

Last-Modified: дата последний модификации инф на сервере(проверка неизменности данных)
	Last-Modified: Sat,16 Jan 2020 21:16:42 GMT

Content-Type тип содержимого и кодировку
	Content-Type: text/html; charset=utf-8

Content-Language: язык
	Content-Language: ru

Content-Length: длинна отданного документа
	Content-Length: 10000

Location-редирект
Location: /test.html

*можно придумывать свои заголовки



3. Тело - содержит передаваемые данные (текст страницы, стили, данные картинки)




				Автоматические НТТР запросы браузера

Допусти заходим на страницу, получаем ХТМЛ текст, в тексте есть ссылки на стили, скрипт и тд.
Браузер делает автоматические повторные запросы для их получения. И для каждого подключения формируется отдельный запрос

!Каждый запрос отнимает время загрузки, поэтому запросы нужно минимизировать



						Редирект


-клиент обращается на сервер по одному URL, сервер отдает статус-код начинающийся с тройки
  Когда клиент получает ответ перенаправления, он использует новый URL и немедленно его загружает.

Location-редирект
Запрос:		GET /page.html HTTP/1.1

Ответ:		HTTP/1.1 301 OK
		Location: /test.html



					Источник REFERER в протоколе

referer - аголовок, содержи УРЛ источника запроса. Если перейти с одной страницы на другую, то он будет содержать адрес первой страницы (полезно для метрик, кто и откуда пришел на сайт)



						USER AGENT


программа, которая скачивает с сервера страницу сайта(браузер), но могут быть и иные (боты)
Боты как правило передают специальный заголовок
Пример:

User-Agent:	 Mozila/5.0 (system-information)
		   platform

Mozila/5.0 - всегда начинается (история)

Пример бота гугл:

		 Mozila/5.0 (compatible; GOOGLEbot/2.1;
			+http://www.google.com/bot.html)





						*HTTPS*

-протокол защищенности использует криптоключи и лицензию подлинности




						GET параметры

в протоколе НТТР в УРЛ сайта можно передавать дополнительные параметры (GET параметры)
строка параметров называется Query String

*наличие GET параметров не изменяет адрес страницы

Синтаксис:?

	GET /page/?param1=value2&2=value2 HTTP/1.1




					Отправка форм методом GET

-на сайте можно задавать формы, в которые пользователь вводит данные. В атрибуте action формы указываем URI на который будет отправлена форма, а в атрибуте метод - имя НТТР метода отправки.
Метод отпраки может быть либо GET/POST (другие не поддерживаются)
Пример:

	<form action='/page/' method='get'>
	 <input name='test1' value='1'>
	 <input name='test2' value='2'>
	 <input type='submit'>
	</form>

После нажатия на отправку будет выполнен следующий НТТР запрос

	GET /page/&test1=value1&test2=2 HTTP/1.1



					Отправка форм методом POST

Пример:

	<form action='/page/' method='POST'>
	 <input name='test1' value='1'>
	 <input name='test2' value='2'>
	 <input type='submit'>
	</form>


После нажатия на отправку будет выполнен следующий НТТР запрос

	POST /page/ HTTP/1.1


*При таком методе данные буду содержаться в теле запроса в виде

	test1=value1&test2=2



					MIME типы в протоколе


-позволяют указывать тип получаемого файла, что бы браузер мог его правильно обработать
(да, браузер корректнее работает с этим методом)

MIME тип указывается в заголовке Content-Type

Content-Type: text/html
/css
/javascript
/plain

и т.д....




					  AJAX запросы

-позволяет загружать часть страницы с сервера, не перезагружая целиком, и работает она через JS.
По какому-то событию браузер отправляет запрос на сервер, запрашивая часть страницы в виде HTML кода,
либо данные в формате JSON. После того, как придет ответ, браузер отобразит их в нужном блоке
*посмотреть AJAX запросы в Server-fetch/xhr



						Coockie


-небольшой текст, который сервер может сохранять в браузере пользователя. Сервер может устаноить несколько кук с разными именами.

*С помощью кук сервер может идентифицировать пользователя и хранить данные каждого клиента между его запросами.

**Куки передаются ЗАГОЛОВКАМИ

***При каждом запросе браузера все куки данные отправляются на сервере

	Cookie: name=john

****Если кука установлена не одна, то сервер отошлет их вместе

	Cookie: name=john;surn:smith

*****Set-Cookie устанавливает нужную куку с именем и значением




						Сессии

-на основе кук работают сессии. Сессии позволяют серверу запоминать клиента и хранить для него информацию (корзина)

При первом обращении клиента сервер устанавливает ему Куку со случайной уникальной строкой и называется она сессионной sessid. Сервер также хранит


Сервер хранит список всех сессионных кук и привязывает к ним нужные данные (корзину и тд)




					REST API через HTTP

-подход стандартизирующий API (Restful). В основе лежит широкое использование метод НТТР.
С помощью метода GET получаются данные
С помощью метода POST создаются данные
С помощью метода PUT изменяются
Delete...

Как выглядят URL для различных действий:

Получаем всех юзеров:		GET http://api.loc/users/

Получаем одного юзера по ID: 		GET http://api.loc/users/1/

Создаем юзера:		 POST http://api.loc/user/

Изменяем юзера по его ID:	 PUT http://api.loc/user/1/

Удаляем юзера по ID:		DELETE http://api.loc/user/1/














