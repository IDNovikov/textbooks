NodeJS - JavaScript выполняемый на сервере, позволяющий 
средствами сервера гнерировать скрипт. А также
позволяет работать с базой данных и файловой системой
 на сервере 

 NPm - менеджер для подключения библиотек, позволяющие
 скачивать библиотеки с помощью команд терминала.
 И самостоятельно разруливающие конфликты версий. 
 Пакетами в терминах npm называют библиотеки, которые
  вы скачиваете и подключаете к вашему проекту.
  
  npm --version команда, показывает версии

  ЧТо бы установить библеотеку через npm:

  npm install имя_библиотеки
  Установленная библиотека попадет в папку node_modules. 
  При этом, если у библиотеки есть зависимости, они также будут 
  установлены в эту папку как отдельные библиотеки. 
  Короткая форма устновки 

  npm i lodash

 				 Dev зависимости в npm в JavaScript

Существуют также библиотеки, которые нужны только в процессе разработки как инструмент для работы программиста. Примером таких библиотек служат сборщики Webpack или Gulp (мы их будем изучать в дальнейнем).

Такие библиотеки также устанавливаются через npm. Однако, их следует устанавливать не в обычные зависимости, а в специальные зависимости для разработчика.

Для этого нужно вызывать установку с флагом --save-dev:

	npm install --save-dev webpack

Или короткая

	npm i -D webpack



				Форматы версий

формат из package.json

	{
	"dependencies": {
		"somelib": "2.4.2"
	}
	}

2.4.2 - необходима точная указанная версия
^2.4.2 - последняя версия совместимая с 2.4.2
~2.4.2 - совместимо с версиями 2.4.2, 2.4.3, 2.4.4 и более патчевые версии
~2.4 - совместимо с 2.4, 2.5, 2.6 и более минорными версиями
2.4.х - со всеми патчевыми версиями
2.х - со всеми минорными
>=2.4 - версии старше 2.4 включительно
2.4.2 3.1.1 - осовместимо с версией 2.4.2 до 3.1.1


				Создание файла package.json

Можно создать файл package.json со всеми нужными настройками через терминал. Для этого нужно запустить следующую команду:

	npm init

После запуска команды терминал будет спрашивать у вас значения параметров, а после этого создаст файл package.json.

С помощью флага -y можно заставить терминал ответить "да" на все вопросы системы:

	npm init -y


					Перенос npm проекта

МОжно установить библиотеки, прописанные в файле package.json. Размещаем в пустой папке следующий файл:
	{
	"dependencies": {
		"jquery": "^3.6.1",
		"lodash": "^4.17.21"
	}
	}

Теперь команду терминала, которая установит все проекты, описанные в package.json:

	npm install


				Файл package-lock.json в npm

Файл package.json содержит диапазон версий пакетов, которые установлены для нашего проекта. Это может привести к некоторым проблемам, если мы через некоторое время решим перенести проект и заново выполнить установку. В этом случае, так как прошло некоторое время после предыдущей установки, будут установлены более новые версии пакетов, что может привести к нестабильной работе нашего проекта.

Поэтому помимо файла package.json npm атоматически создает файл package-lock.json, в котором описаны все установленные зависимости (в том числе зависимости зависимостей нашего проекта) и их точные версии.


				Обновление пакетов через npm

Для обновления пакетов служит следующая команда:

	npm update

Получив эту команду, npm проверит все пакеты на наличие их новых версий, и, если найдёт их новые версии, соответствующие ограничениям на версии пакетов, заданным в package.json, то установит их.

Обновить можно и отдельный пакет:
	
	npm update lodash



				Удаление пакетов через npm
		
Для удаления пакетов служит следующая команда:

	npm uninstall somelib

Если установка была в dev зависимости, то удалять нужно с соответствующим флагом:

	npm uninstall -D somelib

Давайте для примера удалим какую-нибудь библиотеку:

	npm uninstall lodash

			



				Глобальная установка через npm

Некоторые пакеты npm представляют собой не просто библиотеки, а программы, которые после установки добавляют новую команду в терминал.

Такие программы следует устанавливать глобально. Это значит, что они будут установлены не в папку node_modules проекта, а просто на ваш компьютер как программа.

Для запуска глобального режима установки нужно передать флаг -g:

	npm install -g somelib


		


			Глобальное удаление пакетов через npm 

Для удаления библиотек, установленных глобально, используется команда uninstall с флагом -g:

	npm uninstall -g somelib



					Инструмент npx

глобальная установка захламляет операционную систему, а также не дает одновременно держать несколько версий библиотеки для разных проектов.

Лучше пакеты-программы устанавливать локально в проект, а для их запуска использовать специальный инструмент npx.

Установим локально в проект утилиту sloc (в dev записимости):

	npm install -D sloc

Теперь, находясь в папке нашего проекта, мы можем вызвать установленную утилиту:

	npx sloc .




				Запуск скриптов через npm

В файле package.json существует специальная настройка scripts, которая позволяет запускать любые команды терминала через npm. Это используется для того, чтобы превратить длинные команды в более приятные.

Для примера установлена утилита sloc:

	npm install -D sloc

Пусть нам надо с ее помощью считать содержимое папки src:

	npx sloc src

В файле package.json:
	{
	"devDependencies": {
		"sloc": "^0.2.1"
	}
	}

Что бы прописать в него настройку scripts. Эта настройка будет представлять собой объект с именами команд и их значениями. Придумаем для команды подсчета какое-нибудь имя, например count. В качестве значения укажем команду терминала, которую мы хотим запустить:
	{
	"devDependencies": {
		"sloc": "^0.2.1"
	},
	"scripts": {
		"count": "npx sloc src"
	}
	}

Теперь для вызова этой команды мы должны в терминале написать npm, потом команду run и потом придуманное нами имя команды:

	npm run count
















